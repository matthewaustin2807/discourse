// Mocks generated by Mockito 5.4.4 from annotations
// in discourse/test/widgets/pages/discussion_forum_tests/components/like_dislike_comment_bar_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:discourse/model/firebase_model/discussion_entry_firebase.dart'
    as _i5;
import 'package:discourse/model/firebase_model/discussion_reply_firebase.dart'
    as _i2;
import 'package:discourse/service/discussion_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDiscussionReplyFirebase_0 extends _i1.SmartFake
    implements _i2.DiscussionReplyFirebase {
  _FakeDiscussionReplyFirebase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DiscussionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDiscussionService extends _i1.Mock implements _i3.DiscussionService {
  MockDiscussionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> addDiscussionEntry(_i5.DiscussionEntryFirebase? entry) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDiscussionEntry,
          [entry],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addReplyToEntry(
    _i2.DiscussionReplyFirebase? reply,
    String? parentId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addReplyToEntry,
          [
            reply,
            parentId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addReplyToReply(
    _i2.DiscussionReplyFirebase? reply,
    String? parentId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addReplyToReply,
          [
            reply,
            parentId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.DiscussionEntryFirebase>> getAllDiscussionEntries() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllDiscussionEntries,
          [],
        ),
        returnValue: _i4.Future<List<_i5.DiscussionEntryFirebase>>.value(
            <_i5.DiscussionEntryFirebase>[]),
      ) as _i4.Future<List<_i5.DiscussionEntryFirebase>>);

  @override
  _i4.Future<_i5.DiscussionEntryFirebase?> getDiscussionEntry(
          String? entryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDiscussionEntry,
          [entryId],
        ),
        returnValue: _i4.Future<_i5.DiscussionEntryFirebase?>.value(),
      ) as _i4.Future<_i5.DiscussionEntryFirebase?>);

  @override
  _i4.Future<void> addLikeOrDislike(
    String? id,
    bool? isReply,
    bool? isLike,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addLikeOrDislike,
          [
            id,
            isReply,
            isLike,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeLikeOrDislike(
    String? id,
    bool? isReply,
    bool? isLike,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeLikeOrDislike,
          [
            id,
            isReply,
            isLike,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteDiscussionEntry(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteDiscussionEntry,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateReply(
    String? replyId,
    Map<String, dynamic>? updatedData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateReply,
          [
            replyId,
            updatedData,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteReply(String? replyId) => (super.noSuchMethod(
        Invocation.method(
          #deleteReply,
          [replyId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.DiscussionReplyFirebase> getReplyWithNestedReplies(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReplyWithNestedReplies,
          [id],
        ),
        returnValue: _i4.Future<_i2.DiscussionReplyFirebase>.value(
            _FakeDiscussionReplyFirebase_0(
          this,
          Invocation.method(
            #getReplyWithNestedReplies,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.DiscussionReplyFirebase>);
}
