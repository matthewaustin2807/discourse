// Mocks generated by Mockito 5.4.4 from annotations
// in discourse/test/widgets/pages/write_review_tests/write_review_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:discourse/model/course.dart' as _i4;
import 'package:discourse/model/instructor.dart' as _i6;
import 'package:discourse/service/course_service.dart' as _i2;
import 'package:discourse/service/instructor_service.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CourseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCourseService extends _i1.Mock implements _i2.CourseService {
  MockCourseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> addCourse(_i4.Course? course) => (super.noSuchMethod(
        Invocation.method(
          #addCourse,
          [course],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i4.Course?> getCourse(String? courseId) => (super.noSuchMethod(
        Invocation.method(
          #getCourse,
          [courseId],
        ),
        returnValue: _i3.Future<_i4.Course?>.value(),
      ) as _i3.Future<_i4.Course?>);

  @override
  _i3.Future<List<_i4.Course>> getAllCourse() => (super.noSuchMethod(
        Invocation.method(
          #getAllCourse,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Course>>.value(<_i4.Course>[]),
      ) as _i3.Future<List<_i4.Course>>);

  @override
  _i3.Future<List<_i4.Course>> getAllCourseFiltered(String? courseName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllCourseFiltered,
          [courseName],
        ),
        returnValue: _i3.Future<List<_i4.Course>>.value(<_i4.Course>[]),
      ) as _i3.Future<List<_i4.Course>>);

  @override
  _i3.Future<void> updateCourse(
    String? courseId,
    Map<String, dynamic>? updatedData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCourse,
          [
            courseId,
            updatedData,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteCourse(String? courseId) => (super.noSuchMethod(
        Invocation.method(
          #deleteCourse,
          [courseId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Course>> getCoursesByInstructor(String? instructorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCoursesByInstructor,
          [instructorId],
        ),
        returnValue: _i3.Future<List<_i4.Course>>.value(<_i4.Course>[]),
      ) as _i3.Future<List<_i4.Course>>);

  @override
  _i3.Future<List<_i4.Course>> getCoursesWithTag(String? tag) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCoursesWithTag,
          [tag],
        ),
        returnValue: _i3.Future<List<_i4.Course>>.value(<_i4.Course>[]),
      ) as _i3.Future<List<_i4.Course>>);
}

/// A class which mocks [InstructorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockInstructorService extends _i1.Mock implements _i5.InstructorService {
  MockInstructorService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> addInstructor(_i6.Instructor? instructor) =>
      (super.noSuchMethod(
        Invocation.method(
          #addInstructor,
          [instructor],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i6.Instructor?> getInstructor(String? instructorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInstructor,
          [instructorId],
        ),
        returnValue: _i3.Future<_i6.Instructor?>.value(),
      ) as _i3.Future<_i6.Instructor?>);

  @override
  _i3.Future<List<_i6.Instructor>> getAllInstructors() => (super.noSuchMethod(
        Invocation.method(
          #getAllInstructors,
          [],
        ),
        returnValue: _i3.Future<List<_i6.Instructor>>.value(<_i6.Instructor>[]),
      ) as _i3.Future<List<_i6.Instructor>>);

  @override
  _i3.Future<List<_i6.Instructor>> getAllInstructorFiltered(
          String? instructorName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllInstructorFiltered,
          [instructorName],
        ),
        returnValue: _i3.Future<List<_i6.Instructor>>.value(<_i6.Instructor>[]),
      ) as _i3.Future<List<_i6.Instructor>>);

  @override
  _i3.Future<void> updateInstructor(
    String? instructorId,
    Map<String, dynamic>? updatedData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateInstructor,
          [
            instructorId,
            updatedData,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteInstructor(String? instructorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteInstructor,
          [instructorId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i6.Instructor?> getInstructorDetails(String? instructorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInstructorDetails,
          [instructorId],
        ),
        returnValue: _i3.Future<_i6.Instructor?>.value(),
      ) as _i3.Future<_i6.Instructor?>);
}
